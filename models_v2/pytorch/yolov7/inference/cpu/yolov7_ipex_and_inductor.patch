diff --git a/models/yolo.py b/models/yolo.py
index 95a019c..048fef0 100644
--- a/models/yolo.py
+++ b/models/yolo.py
@@ -42,16 +42,26 @@ class Detect(nn.Module):
     def forward(self, x):
         # x = x.copy()  # for profiling
         z = []  # inference output
-        self.training |= self.export
+
+        # use training = self.training | self.export instead of self.training |= self.export.
+        # because setting the module attribute self.training will cause error
+        # during capture_pre_autograd_graph for int8 torch inductor backend:
+        # torch._dynamo.exc.Unsupported: setattr(UnspecializedNNModuleVariable(Detect), training, ...)
+        # See https://github.com/pytorch/pytorch/issues/101168.
+        # the change will not affect inference.
+        training = self.training | self.export
         for i in range(self.nl):
             x[i] = self.m[i](x[i])  # conv
             bs, _, ny, nx = x[i].shape  # x(bs,255,20,20) to x(bs,3,20,20,85)
             x[i] = x[i].view(bs, self.na, self.no, ny, nx).permute(0, 1, 3, 4, 2).contiguous()
 
-            if not self.training:  # inference
+            # use training instead of self.training
+            if not training:  # inference
                 if self.grid[i].shape[2:4] != x[i].shape[2:4]:
                     self.grid[i] = self._make_grid(nx, ny).to(x[i].device)
-                y = x[i].sigmoid()
+                # here bf16 has a greater impact on accuracy
+                # use .float() for bf16 to improve accuracy without affecting performance
+                y = x[i].float().sigmoid() if x[i].dtype == torch.bfloat16 else x[i].sigmoid()
                 if not torch.onnx.is_in_onnx_export():
                     y[..., 0:2] = (y[..., 0:2] * 2. - 0.5 + self.grid[i]) * self.stride[i]  # xy
                     y[..., 2:4] = (y[..., 2:4] * 2) ** 2 * self.anchor_grid[i]  # wh
@@ -62,7 +72,8 @@ class Detect(nn.Module):
                     y = torch.cat((xy, wh, conf), 4)
                 z.append(y.view(bs, -1, self.no))
 
-        if self.training:
+        # use training instead of self.training
+        if training:
             out = x
         elif self.end2end:
             out = torch.cat(z, 1)
diff --git a/utils/datasets.py b/utils/datasets.py
index 5fe4f7b..aa55efd 100644
--- a/utils/datasets.py
+++ b/utils/datasets.py
@@ -86,6 +86,7 @@ def create_dataloader(path, imgsz, batch_size, stride, opt, hyp=None, augment=Fa
                         batch_size=batch_size,
                         num_workers=nw,
                         sampler=sampler,
+                        drop_last=opt.drop_last,
                         pin_memory=True,
                         collate_fn=LoadImagesAndLabels.collate_fn4 if quad else LoadImagesAndLabels.collate_fn)
     return dataloader, dataset
diff --git a/utils/torch_utils.py b/utils/torch_utils.py
index 1e631b5..46ec837 100644
--- a/utils/torch_utils.py
+++ b/utils/torch_utils.py
@@ -341,8 +341,8 @@ def revert_sync_batchnorm(module):
 
 
 class TracedModel(nn.Module):
-
-    def __init__(self, model=None, device=None, img_size=(640,640)): 
+    # Add torch JIT trace support for bfloat16 and float16 data types and use sample_input from outside
+    def __init__(self, model=None, device="cpu", img_size=(640,640), dtype=torch.float, sample_input=None):
         super(TracedModel, self).__init__()
         
         print(" Convert model to Traced-model... ") 
@@ -356,13 +356,15 @@ class TracedModel(nn.Module):
 
         self.detect_layer = self.model.model[-1]
         self.model.traced = True
-        
-        rand_example = torch.rand(1, 3, img_size, img_size)
-        
-        traced_script_module = torch.jit.trace(self.model, rand_example, strict=False)
-        #traced_script_module = torch.jit.script(self.model)
-        traced_script_module.save("traced_model.pt")
-        print(" traced_script_module saved! ")
+        if sample_input != None:
+            sample_input = sample_input.to(dtype)
+        else:
+            sample_input = torch.rand(1, 3, img_size, img_size)
+
+        with torch.cpu.amp.autocast(enabled = dtype in [torch.bfloat16, torch.float16], dtype=dtype), torch.no_grad():
+            traced_script_module = torch.jit.trace(self.model, sample_input, strict=False).eval()
+            traced_script_module = torch.jit.freeze(traced_script_module)
+
         self.model = traced_script_module
         self.model.to(device)
         self.detect_layer.to(device)
